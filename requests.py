from app.database.models import async_session
from app.database.models import Account, Character, Location, Inventory, ItemList, Shop, Race
from sqlalchemy import select, update, delete, desc
from sqlalchemy.orm.query import Query


# –†–µ–∫–≤–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –¥–∞. –ï—Å–ª–∏ –Ω–µ—Ç—É, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç tg id, –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞
async def set_account(tg_id, login, password):
    async with async_session() as session:
        account = await session.scalar(select(Account).where(Account.tg_id == tg_id))

        if not account:
            session.add(Account(tg_id=tg_id, login=login, password=password))
            await session.commit()


# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–∏
async def set_character(account, first_name, last_name, race, age, location, description):
    async with async_session() as session:
        session.add(Character(account=account, first_name=first_name, last_name=last_name, race=race, age=age, location=location, description=description, game_state=0))
        await session.commit()


# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–æ—Ä—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –Ω–µ—Ç
async def set_inventory(char_id):
    async with async_session() as session:
        session.add(Inventory(id_char=char_id, money='0'))
        await session.commit()


# –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫—É –ø—Ä–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–∏
async def set_inventory_to_new_player(id):
    async with async_session() as session:
        await session.execute(update(Character).where(Character.id == id).values(inventory=id))
        await session.commit()


# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
async def set_char_location(char_id, loc_id):
    async with async_session() as session:
        await session.execute(update(Character).where(Character.id == char_id).values(location=loc_id))
        await session.commit()


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–∫—É –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å 0 –∏–ª–∏ 1 –∫–æ–≥–¥–∞ –≥–¥–µ –Ω—É–∂–Ω–æ (–≤–æ—à–µ–ª –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã)
async def set_char_ingame_state(char_id, char_state):
    async with async_session() as session:
        await session.execute(update(Character).where(Character.id == char_id).values(game_state=char_state))
        await session.commit()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –µ–≥–æ –∞–π–¥–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
async def set_new_item_to_char_inv(new_items, inv_id):
    async with async_session() as session:
        await session.execute(update(Inventory).where(Inventory.id == inv_id).values(items=new_items))
        await session.commit()


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞
async def delete_char_by_id(char_id):
    async with async_session() as session:
        await session.execute(delete(Character).where(Character.id == char_id))
        await session.commit()


# –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
async def delete_char_inv_by_id(inv_id):
    async with async_session() as session:
        await session.execute(delete(Inventory).where(Inventory.id_char == inv_id))
        await session.commit()


# –†–µ–∫–≤–µ—Å—Ç –Ω–∞ –≤—ã–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ. –ü–æ tg id –≤—ã–¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ
async def get_account(tg_id):
    async with async_session() as session:
        return await session.scalar(select(Account).where(Account.tg_id == tg_id))
    

# –ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫ –ø–æ –µ–≥–æ –∞–∫–∫ id
async def get_account_by_id(id):
    async with async_session() as session:
        return await session.scalar(select(Account).where(Account.id == id))


# –†–µ–∫–≤–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è tg id –ø–æ –∏–≥—Ä–æ–∫—É –≤ –∏–≥—Ä–µ (–¥–ª—è –ª—Å)
async def get_tg_id_by_char(char_id):
    async with async_session() as session:
        char = await session.scalar(select(Character).where(Character.id == char_id))
        acc = await session.scalar(select(Account).where(Account.id == char.account))
        return acc.tg_id


# tg_id, account, name, surname, race, age, loc, desc
async def get_character(id):
    async with async_session() as session:
        return await session.scalar(select(Character).where(Character.id == id))


# –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—é
async def get_character_on_create(desc):
    async with async_session() as session:
        return await session.scalar(select(Character).where(Character.description == desc))


# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –Ω–∞–º–∏ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ –∏ –Ω–µ –≤–∞–∂–Ω–æ –∫–∞–∫–æ–π –≥–µ–π–º —Å—Ç–µ–π—Ç
async def get_all_characters_on_acc(acc):
    async with async_session() as session:

        return await session.scalars(select(Character).where(Character.account == acc))
        #players = await get_character(char.id)
        #for player in players:
            #if player.game_state == 1 and player.account != char.account:
            #acc = await get_account_by_id(player.account)
            #–ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ —Å–µ—Ç–∏ –ø—Ä–∏–±–∞–≤, –∫ –µ–≥–æ –Ω–∏–∫—É "üåá"
            #–ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤ —Å–µ—Ç–∏ –ø—Ä–∏–±–∞–≤ –∫ –Ω–∏–∫—É "üåÉ"


#–ü–æ–ª—É—á–∏—Ç—å... –í—Å–µ —Ä–∞—Å—ã?
async def get_all_race():
    async with async_session() as session:
        return await session.scalars(select(Race))


# –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ
async def get_characters(account):
    async with async_session() as session:
        return await session.scalars(select(Character).where(Character.account == account))


# –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
async def get_characters_in_location(location):
    async with async_session() as session:
        return await session.scalars(select(Character).where(Character.location == location))
    

# –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –≥–¥–µ –∏–≥—Ä–æ–∫
async def get_char_location(char_loc):
    async with async_session() as session:
        return await session.scalar(select(Location).where(Location.id == char_loc))


# –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
async def get_location(location):
    async with async_session() as session:
        return await session.scalar(select(Location).where(Location.id == location))


# –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∞–π–¥–∏
async def get_inventory_by_char_id(char_id):
    async with async_session() as session:
        return await session.scalar(select(Inventory).where(Inventory.id_char == char_id))
    

# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ –µ–≥–æ id
async def get_item_by_id(item_id):
    async with async_session() as session:
        return await session.scalar(select(ItemList).where(ItemList.id == item_id))


# –ü–æ–ª—É—á–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ –µ–≥–æ id –º–∞–≥–∞–∑–∏–Ω–∞
async def get_shop_items(shop_id):
    async with async_session() as session:
        return await session.scalar(select(Shop).where(Shop.id == shop_id))

